- name: Demo on Variables
  hosts: localhost
  vars_files: #using a file
    - sample-vars.yml
  vars:
    URL: play.example.com
  tasks: #while executing the playbook, tasks will run after roles
    - name: Print URL
      ansible.builtin.debug:
        msg: "URL - {{ URL }}, URL1 - {{  URL1 }}"  # same like shell you are accessing variable with prefix $, here variable will be under {{ }}
                        # if the value starts with variable [ for ex: {{ URL }} is URL], then it requires quotes and we can use any single or double quotes.
                        # Unlike shell, here in ansible single or double quotes does not have any difference
      vars:
        URL: tasks.example.com

  roles: #while executing the playbook, roles will run first
    - sample


# Variables precedence
# 1. CLi -e variable : variable is provided while executing the playbook.
# 2. tasks : while executing the task, the variable is defined in the task itself as it is defined above. this is rare.
# 3. roles vars : main.yml under vars under roles.
# 4. vars_files : files such as sample-vars.yml
# 5. vars : vars in the same file. here it is play.example.com
# n. roles defaults : main.yml under defaults under roles. defaults folder contains lower priority variables.

# Variable types
# 1. simple variable
# 2. List
# 3. Dictionary / Map

- name: Variable type demo
  hosts: localhost
  vars:
    CLASS: devops # plain variable
    timings: # List
      - 6am
      - 7am
    trainers: # dict / map
      6am: John
      7am: Peter
  tasks:
    - name: Print
      ansible.builtin.debug:
        msg: "{{ CLASS }} - {{ timings[0] }}, trainer - {{ trainers['6am'] }}"

- name: Variable Data types
  hosts: localhost
  vars:
    number1: 10
    number2: 11.1
    string1: abc
    string2: xyz123
    boolean1: yes
    boolean2: no
    boolean3: true
    boolean4: false
  tasks:
    - name: Print
      ansible.builtin.debug:
        msg: ""

- name: Retrive the output from previous tasks and store in variable
  hosts: localhost
  tasks:
    - ansible.builtin.shell: uptime
      register: out

    - ansible.builtin.debug:
        msg: "{{ out }}"

